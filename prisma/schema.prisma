generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String?
  email      String     @unique
  password   String?
  properties Property[]
  bookings   Booking[]
  wishlists  Wishlist[]
}

model Property {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  host             User       @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId           String     @db.ObjectId
  title            String
  description      String
  price            Float
  propertyType     String
  placeType        String
  noOfBedrooms     Int
  noOfBathrooms    Int
  noOfBeds         Int
  noOfAdults       Int
  noOfChildren     Int
  noOfInfants      Int
  country          String
  state            String
  city             String
  address          String
  zipCode          String
  latitude         Float
  longitude        Float
  amenities        String[]
  nearbyActivities String[]
  media            String[]
  images           String[]
  bookings         Booking[]
  wishlists        Wishlist[]
}

model Booking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   String   @db.ObjectId
  startDate    DateTime
  endDate      DateTime
  totalPrice   Float
  nightlyPrice Float
}

model Wishlist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @db.ObjectId

  @@unique([propertyId, userId])
}
